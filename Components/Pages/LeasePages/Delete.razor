@page "/leases/delete"
@using Microsoft.EntityFrameworkCore
@using RentalSystem.Models
@inject IDbContextFactory<RentalSystem.Data.RentalSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Lease</h2>
    <hr />
    @if (lease is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@lease.StartDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@lease.EndDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rent</dt>
            <dd class="col-sm-10">@lease.Rent</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Deposit</dt>
            <dd class="col-sm-10">@lease.Deposit</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PaymentDueDay</dt>
            <dd class="col-sm-10">@lease.PaymentDueDay</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@lease.IsActive</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UnitId</dt>
            <dd class="col-sm-10">@lease.UnitId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TenantId</dt>
            <dd class="col-sm-10">@lease.TenantId</dd>
        </dl>
        <EditForm method="post" Model="lease" OnValidSubmit="DeleteLease" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(lease is null)">Delete</button> |
            <a href="/leases">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Lease? lease;

    [SupplyParameterFromQuery]
    private int LeaseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        lease = await context.Leases.FirstOrDefaultAsync(m => m.LeaseId == LeaseId);

        if (lease is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteLease()
    {
        using var context = DbFactory.CreateDbContext();
        context.Leases.Remove(lease!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/leases");
    }
}
