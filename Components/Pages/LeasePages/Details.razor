@page "/leases/details"
@using Microsoft.EntityFrameworkCore
@using RentalSystem.Models
@inject IDbContextFactory<RentalSystem.Data.RentalSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Lease</h2>
    <hr />
    @if (lease is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@lease.StartDate</dd>
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@lease.EndDate</dd>
            <dt class="col-sm-2">Rent</dt>
            <dd class="col-sm-10">@lease.Rent</dd>
            <dt class="col-sm-2">Deposit</dt>
            <dd class="col-sm-10">@lease.Deposit</dd>
            <dt class="col-sm-2">PaymentDueDay</dt>
            <dd class="col-sm-10">@lease.PaymentDueDay</dd>
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@lease.IsActive</dd>
            <dt class="col-sm-2">PropertyId</dt>
            <dd class="col-sm-10">@lease.PropertyId</dd>
            <dt class="col-sm-2">TenantId</dt>
            <dd class="col-sm-10">@lease.TenantId</dd>
        </dl>
        <div>
            <a href="@($"/leases/edit?leaseid={lease.LeaseId}")">Edit</a> |
            <a href="@($"/leases")">Back to List</a>
        </div>
    }
</div>

@code {
    private Lease? lease;

    [SupplyParameterFromQuery]
    private int LeaseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        lease = await context.Lease.FirstOrDefaultAsync(m => m.LeaseId == LeaseId);

        if (lease is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
