@page "/units/delete"
@using Microsoft.EntityFrameworkCore
@using RentalSystem.Models
@inject IDbContextFactory<RentalSystem.Data.RentalSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Unit</h2>
    <hr />
    @if (unit is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">UnitNumber</dt>
            <dd class="col-sm-10">@unit.UnitNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PropertyId</dt>
            <dd class="col-sm-10">@unit.PropertyId</dd>
        </dl>
        <EditForm method="post" Model="unit" OnValidSubmit="DeleteUnit" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(unit is null)">Delete</button> |
            <a href="/units">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Unit? unit;

    [SupplyParameterFromQuery]
    private int UnitId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        unit = await context.Units.FirstOrDefaultAsync(m => m.UnitId == UnitId);

        if (unit is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteUnit()
    {
        using var context = DbFactory.CreateDbContext();
        context.Units.Remove(unit!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/units");
    }
}
