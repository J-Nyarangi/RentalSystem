@page "/properties/details"
@using Microsoft.EntityFrameworkCore
@using RentalSystem.Models
@inject IDbContextFactory<RentalSystem.Data.RentalSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Property</h2>
    <hr />
    @if (property is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@property.Name</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@property.Address</dd>
            <dt class="col-sm-2">Assigned To:</dt>
            <dd class="col-sm-10">@property.Landlord.FirstName @property.Landlord.LastName</dd>
        </dl>
        <div>
            <a href="@($"/properties/edit?propertyid={property.PropertyId}")">Edit</a> |
            <a href="@($"/properties")">Back to List</a>
        </div>
    }
</div>

@code {
    private Property? property;

    [SupplyParameterFromQuery]
    private int PropertyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        property = await context.Properties.Include(p => p.Landlord).FirstOrDefaultAsync(m => m.PropertyId == PropertyId);

        if (property is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
